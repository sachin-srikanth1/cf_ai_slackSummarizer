import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Card,
  CardContent,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormControlLabel,
  Switch,
  Button,
  TextField,
  Box,
  Alert,
  Divider,
  Chip,
  Paper,
} from '@mui/material';\nimport {\n  Save,\n  Schedule,\n  Notifications,\n  Tune,\n  Sync,\n} from '@mui/icons-material';\nimport { apiService, UserPreferences, SlackChannel } from '../services/apiService';\n\nconst Settings: React.FC = () => {\n  const [preferences, setPreferences] = useState<UserPreferences>({\n    summary_style: 'technical',\n    include_threads: true,\n    filter_channels: [],\n    report_frequency: 'daily',\n  });\n  const [channels, setChannels] = useState<SlackChannel[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  // Scheduling settings\n  const [eodEnabled, setEodEnabled] = useState(false);\n  const [eodTime, setEodTime] = useState('17:00');\n  const [eowEnabled, setEowEnabled] = useState(false);\n  const [eowDay, setEowDay] = useState('friday');\n  const [eowTime, setEowTime] = useState('17:00');\n\n  useEffect(() => {\n    loadSettings();\n    loadChannels();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      const userPrefs = await apiService.getUserPreferences();\n      setPreferences(userPrefs);\n    } catch (err: any) {\n      setError('Failed to load preferences');\n    }\n  };\n\n  const loadChannels = async () => {\n    try {\n      const channelData = await apiService.getSlackChannels();\n      setChannels(channelData);\n    } catch (err: any) {\n      setError('Failed to load Slack channels');\n    }\n  };\n\n  const handleSavePreferences = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSuccess(null);\n      \n      await apiService.updateUserPreferences(preferences);\n      setSuccess('Preferences updated successfully!');\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to update preferences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleScheduleEOD = async () => {\n    try {\n      setLoading(true);\n      await apiService.scheduleEODReports(eodEnabled, eodTime);\n      setSuccess(`EOD reports ${eodEnabled ? 'enabled' : 'disabled'} successfully!`);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to update EOD schedule');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleScheduleEOW = async () => {\n    try {\n      setLoading(true);\n      await apiService.scheduleEOWReports(eowEnabled, eowDay, eowTime);\n      setSuccess(`EOW reports ${eowEnabled ? 'enabled' : 'disabled'} successfully!`);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to update EOW schedule');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChannelToggle = (channelId: string) => {\n    setPreferences(prev => ({\n      ...prev,\n      filter_channels: prev.filter_channels.includes(channelId)\n        ? prev.filter_channels.filter(id => id !== channelId)\n        : [...prev.filter_channels, channelId]\n    }));\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Settings\n      </Typography>\n\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\n      {success && <Alert severity=\"success\" sx={{ mb: 2 }}>{success}</Alert>}\n\n      <Grid container spacing={3}>\n        {/* Summary Preferences */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                <Tune sx={{ mr: 1, verticalAlign: 'middle' }} />\n                Summary Preferences\n              </Typography>\n              \n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <InputLabel>Summary Style</InputLabel>\n                <Select\n                  value={preferences.summary_style}\n                  label=\"Summary Style\"\n                  onChange={(e) => setPreferences(prev => ({\n                    ...prev,\n                    summary_style: e.target.value as any\n                  }))}\n                >\n                  <MenuItem value=\"technical\">Technical - Focus on code, bugs, implementation</MenuItem>\n                  <MenuItem value=\"executive\">Executive - High-level progress and milestones</MenuItem>\n                  <MenuItem value=\"detailed\">Detailed - Comprehensive with all context</MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormControl fullWidth sx={{ mb: 3 }}>\n                <InputLabel>Report Frequency</InputLabel>\n                <Select\n                  value={preferences.report_frequency}\n                  label=\"Report Frequency\"\n                  onChange={(e) => setPreferences(prev => ({\n                    ...prev,\n                    report_frequency: e.target.value as any\n                  }))}\n                >\n                  <MenuItem value=\"daily\">Daily</MenuItem>\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={preferences.include_threads}\n                    onChange={(e) => setPreferences(prev => ({\n                      ...prev,\n                      include_threads: e.target.checked\n                    }))}\n                  />\n                }\n                label=\"Include Thread Messages\"\n                sx={{ mb: 2 }}\n              />\n\n              <Button\n                variant=\"contained\"\n                startIcon={<Save />}\n                onClick={handleSavePreferences}\n                disabled={loading}\n                fullWidth\n              >\n                Save Preferences\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Channel Filters */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Channel Filters\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                Select channels to exclude from summaries. If none selected, all channels will be included.\n              </Typography>\n              \n              <Paper \n                variant=\"outlined\" \n                sx={{ \n                  p: 2, \n                  maxHeight: 300, \n                  overflow: 'auto',\n                  backgroundColor: 'grey.50'\n                }}\n              >\n                {channels.length === 0 ? (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Loading channels...\n                  </Typography>\n                ) : (\n                  channels.map((channel) => (\n                    <Chip\n                      key={channel.id}\n                      label={`#${channel.name}`}\n                      clickable\n                      color={preferences.filter_channels.includes(channel.id) ? 'primary' : 'default'}\n                      onClick={() => handleChannelToggle(channel.id)}\n                      sx={{ m: 0.5 }}\n                    />\n                  ))\n                )}\n              </Paper>\n              \n              {preferences.filter_channels.length > 0 && (\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                  {preferences.filter_channels.length} channel(s) will be excluded from summaries\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Slack Integration */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                <Sync sx={{ mr: 1, verticalAlign: 'middle' }} />\n                Slack Integration\n              </Typography>\n              \n              <TextField\n                fullWidth\n                label=\"Slack User ID (Optional)\"\n                placeholder=\"U1234567890\"\n                value={preferences.slack_user_id || ''}\n                onChange={(e) => setPreferences(prev => ({\n                  ...prev,\n                  slack_user_id: e.target.value\n                }))}\n                sx={{ mb: 3 }}\n                helperText=\"Your Slack user ID for personalized mentions\"\n              />\n              \n              <TextField\n                fullWidth\n                label=\"Notification Channel (Optional)\"\n                placeholder=\"#general\"\n                value={preferences.notification_channel || ''}\n                onChange={(e) => setPreferences(prev => ({\n                  ...prev,\n                  notification_channel: e.target.value\n                }))}\n                helperText=\"Channel to send report notifications\"\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Scheduled Reports */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                <Schedule sx={{ mr: 1, verticalAlign: 'middle' }} />\n                Scheduled Reports\n              </Typography>\n              \n              {/* EOD Scheduling */}\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  End of Day (EOD) Reports\n                </Typography>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={eodEnabled}\n                      onChange={(e) => setEodEnabled(e.target.checked)}\n                    />\n                  }\n                  label=\"Enable automatic EOD reports\"\n                  sx={{ mb: 1 }}\n                />\n                \n                {eodEnabled && (\n                  <TextField\n                    type=\"time\"\n                    label=\"EOD Report Time\"\n                    value={eodTime}\n                    onChange={(e) => setEodTime(e.target.value)}\n                    sx={{ mb: 2 }}\n                    fullWidth\n                  />\n                )}\n                \n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={handleScheduleEOD}\n                  disabled={loading}\n                >\n                  Update EOD Schedule\n                </Button>\n              </Box>\n\n              <Divider sx={{ my: 2 }} />\n\n              {/* EOW Scheduling */}\n              <Box>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  End of Week (EOW) Reports\n                </Typography>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={eowEnabled}\n                      onChange={(e) => setEowEnabled(e.target.checked)}\n                    />\n                  }\n                  label=\"Enable automatic EOW reports\"\n                  sx={{ mb: 1 }}\n                />\n                \n                {eowEnabled && (\n                  <>\n                    <FormControl fullWidth sx={{ mb: 2 }}>\n                      <InputLabel>Day of Week</InputLabel>\n                      <Select\n                        value={eowDay}\n                        label=\"Day of Week\"\n                        onChange={(e) => setEowDay(e.target.value)}\n                      >\n                        <MenuItem value=\"monday\">Monday</MenuItem>\n                        <MenuItem value=\"tuesday\">Tuesday</MenuItem>\n                        <MenuItem value=\"wednesday\">Wednesday</MenuItem>\n                        <MenuItem value=\"thursday\">Thursday</MenuItem>\n                        <MenuItem value=\"friday\">Friday</MenuItem>\n                      </Select>\n                    </FormControl>\n                    \n                    <TextField\n                      type=\"time\"\n                      label=\"EOW Report Time\"\n                      value={eowTime}\n                      onChange={(e) => setEowTime(e.target.value)}\n                      sx={{ mb: 2 }}\n                      fullWidth\n                    />\n                  </>\n                )}\n                \n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={handleScheduleEOW}\n                  disabled={loading}\n                >\n                  Update EOW Schedule\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* API Information */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                <Notifications sx={{ mr: 1, verticalAlign: 'middle' }} />\n                System Information\n              </Typography>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Backend Status\n                  </Typography>\n                  <Typography variant=\"body1\" color=\"success.main\">\n                    Connected\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Slack Integration\n                  </Typography>\n                  <Typography variant=\"body1\" color=\"success.main\">\n                    Active\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    AI Provider\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    OpenAI GPT-4\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12} sm={6} md={3}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Last Sync\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    {new Date().toLocaleString()}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Settings;"